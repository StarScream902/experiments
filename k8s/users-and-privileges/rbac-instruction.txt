# Generate new certificate
# First, we have to generate a private key and a certificate signing request:

openssl genrsa -out developers.pem
openssl req -new -key developers.pem -out developers.csr -subj "/CN=developers"

# developers well be my username. You can add your user to specific groups by addin them as groups like devops-groupe:

openssl req -new -key ivnilv.pem -out ivnilv.csr -subj "/CN=developers/O=devops-groupe"

# Signing the certificate
# Use the csr file for generating a CertificateSigningRequest object n Kubernetes:

cat developers.csr | base64 | tr -d '\n'

cat <<'EOF'> developers-csr.yaml
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: user-request-developers
spec:
  groups:
  - system:authenticated
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1dqQ0NBVUlDQVFBd0ZURVRNQkVHQTFVRUF3d0taR1YyWld4dmNHVnljekNDQVNJd0RRWUpLb1pJaHZjTgpBUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS1hjWERHZG9JOElOMW5PSGRnS3FTRi83cktqeHJZRkZDd2RydThuCm9aRVlUUUtjd2VZSElUVHhMdU14RHFVeTZrb0RwcWhpQUhsMDZIWjhmWWFKSjBuQVpGMCtXb0RyMnlIM296U1MKQXVPeGJuUzFCak91UExvZWdOUjNmeGJEaDdJMkxaRFRFRXV6eFNtWkk5VURtVCtxaHc5SXgzNEJVRXpZNExjawp6bHVxUlE2d3hEZktPenVVZUU0MW50MWtoQldvUEE5dkwwdDNKWUJMbUZvazMreklzMEh4TzZaUW5EV1VxekJkCm0yMC85WCtlSlZWRWZVZmEzendrS2VZS2VteEJQcVF4cDZNMFVRWVlkWHVCajZvbWY2eWZ2OU5rVXJ0VHZaMWoKVDJkbjNIUlk1dWxJQmRxaHVmbVV6VmVDa2FXQURnc3M0NGVpRXpmZDN2RWhmV2NDQXdFQUFhQUFNQTBHQ1NxRwpTSWIzRFFFQkN3VUFBNElCQVFCVEhjOGZ1RWE0NzJLcXFKbmhKbElMdzZjOE93b3BjS3ROeEg3TVJiS01McHM0CndxZUgxbExEdTE0aHZaUVppT1ptM1Zlb28xMUIzOTZjLzFsbjU4WEsvVnBVNk1jZnV2ajVuQ1VoQ1J4aFowenUKUlFScHA3cHVDcEJ5aGQ4WVpVVjJ3cVpKRlNiWk95Sng4VllVS0hZRnQvRGdoZEMvbVNSQ2NhTTVqNnQ4Sk55dQpXQ1FsYy8zUHBnT3p6ZlV0dDh6SUtZRHR4WERYdE1HWFRGTjdoTklEdE9ubTlKa0ovemFDaUthdjYyRzMydTMvCmdtZThla1krNDNNVkFNd0Rxc2l0cFJPeWR4SGUzTm5hT3BuQ1VuWEUyampvdXFkY3VmVGVuVFNId1lmTUMxbU4KUDZSOWRlQXQxYWwycGg4TWVWbUpYOE9Gbnh4SDlrN2krdzVrY0RvQwotLS0tLUVORCBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0K
  usages:
  - client auth
EOF

# Create the CertificateSigningRequest and approve it. Then the Kubernetes api server will generate the certificate theat you can use to authentication.

kubectl create -f developers-csr.yaml
kubectl certificate approve user-request-developers

kubectl get csr
`NAME                       AGE       REQUESTOR   CONDITION
user-request-developers   1m        admin       Approved,Issued`

# Now the certificate should be signed. You can download the new signed public key from the csr resource:

kubectl get csr user-request-developers -o jsonpath='{.status.certificate}' | base64 -d > developers-user.crt

# Create new user config file
kubectl --kubeconfig ~/.kube/scw-k8s-developers.yaml config set-cluster testing --insecure-skip-tls-verify=true --server=https://c024f2ac-0488-4f4e-8f7b-77062c555c79.api.k8s.fr-par.scw.cloud:6443
kubectl --kubeconfig ~/.kube/scw-k8s-developers.yaml config set-credentials developers --client-certificate=developers-user.crt --client-key=developers.pem --embed-certs=true
kubectl --kubeconfig ~/.kube/scw-k8s-developers.yaml config set-context default --cluster=testing --user=developers
kubectl --kubeconfig ~/.kube/scw-k8s-developers.yaml config use-context default

# Ofcourse you need rbac for this user:

cat <<'EOF'> developers-rbac.yaml
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: developers
rules:
- apiGroups: ["*"]
  resources: ["pods","deployments","configmaps","daemonsets","statefulstates","replicasets","jobs","cronjobs","services","ingresses","apps","namespaces"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["*"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["*"]
  resources: ["pods/portforward"]
  verbs: ["create"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: developers
  namespace: dev
subjects:
- kind: User
  name: developers
  apiGroup: rbac.authorization.k8s.io
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: developers
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: dev
  name: developers
rules:
- apiGroups: ["*"]
  resources: ["pods/*"]
  verbs: ["*"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: developers
  namespace: dev
subjects:
- kind: User
  name: developers
  apiGroup: rbac.authorization.k8s.io
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: developers
EOF

kubectl apply -f developers-rbac.yaml

# Letâ€™s test if the new kubeconfig we generated worked fine:

kubectl --kubeconfig ~/.kube/scw-k8s-developers.yaml get pods
