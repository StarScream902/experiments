---
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /(master|main|develop|release\/.*)/'
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never  # Prevent pipeline run for push event
    - when: always # Run pipeline for all other cases

stages:
  - test

################# Anchors for reusing ################## 
.service_kafka: &service_kafka
  - name: bitnami/kafka:3.1
    alias: kafka
    variables:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_BROKER_ID: "1"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@127.0.0.1:9093"
      ALLOW_PLAINTEXT_LISTENER: "yes"

.service_mongodb: &service_mongodb
  - name: registry.gitlab.com/my-custom-images/mongodb:main-d33818ab
    alias: mongodb
    variables:
      MONGO_INITDB_ROOT_USERNAME: mongoadmin
      MONGO_INITDB_ROOT_PASSWORD: mongoadmin
      MONGO_INITDB_DATABASE: test

################# Templates ###########

test kafka:
  stage: test
  image:
    name: bitnami/kafka:3.1
    entrypoint: [""]
  variables:
    KAFKA_HOST: kafka:9092
  script:
    - until /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server ${KAFKA_HOST} --list; do sleep 1; done
    - /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server ${KAFKA_HOST} --create --if-not-exists --replication-factor 1 --partitions 1 --topic some_topic_name
    - /opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server ${KAFKA_HOST} --list
    - sleep 60
  services:
    *service_kafka

test mongo:
  stage: test
  image:
    name: percona/percona-server-mongodb:4.4
    entrypoint: ["/bin/bash", "-c"]
  variables:
    MONGO_HOST: mongodb
    MONGO_INITDB_ROOT_USERNAME: mongoadmin
    MONGO_INITDB_ROOT_PASSWORD: mongoadmin
    MONGO_INITDB_DATABASE: test
  script:
    - until mongo mongodb://${MONGO_HOST}/admin -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --quiet --eval "getHostName()"; do sleep 1; done; echo "mongo is ready"
    - 'mongo mongodb://${MONGO_HOST}/admin -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --quiet --eval "db.adminCommand( { listDatabases: 1, nameOnly: true} )"'
    - sleep 60
  services:
    *service_mongodb
